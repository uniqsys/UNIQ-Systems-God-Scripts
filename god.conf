DJ_APPS = {
  'app-name'       => '/home/app-name/app/current'
}

def delayed_job_monitor(w)
  # retart if memory gets too high
  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 200.megabytes
      c.times = 2
    end
  end

  # determine the state on startup
  w.transition(:init, { true => :up, false => :start }) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
      c.interval = 5.seconds
    end
  
    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
    end
  end
end

DJ_APPS.each do |name, rails_root|
  God.watch do |w|
    w.pid_file    = "#{rails_root}/tmp/pids/delayed_job.pid"

    w.uid	  = name
    w.gid	  = "rvm"
    w.name        = "dj_#{name}"
    w.group       = name
    w.interval    = 30.seconds

    w.start       = "source /usr/local/rvm/bin/rvm; rvm use 1.9.2@#{name}; RAILS_ENV=production ruby #{rails_root}/script/delayed_job start"
    w.stop        = "kill -QUIT `cat #{rails_root}/tmp/pids/delayed_job.pid`"
    w.restart     = "kill -USR2 `cat #{rails_root}/tmp/pids/delayed_job.pid`"

    delayed_job_monitor(w)
  end
end
